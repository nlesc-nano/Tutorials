import os
import sys
import pathlib
from typing import TypeVar, overload, Union, Any
from collections.abc import KeysView, ItemsView, ValuesView, Iterable, Mapping, Iterator

from typing_extensions import Protocol

_T = TypeVar("_T")
_KT = TypeVar("_KT")
_VT_co = TypeVar("_VT_co", covariant=True)

_PathLike = Union[str, bytes, os.PathLike[Any]]

class _SupportsKeysAndGetItem(Protocol[_KT, _VT_co]):
    def keys(self) -> Iterable[_KT]: ...
    def __getitem__(self, __k: _KT) -> _VT_co: ...

__all__: list[str]

class PathMapping(Mapping[str, _VT_co]):
    @overload
    def __init__(self: PathMapping[_VT_co], __iterable: None = ..., **kwargs: _VT_co) -> None: ...
    @overload
    def __init__(self, __iterable: _SupportsKeysAndGetItem[_PathLike, _VT_co], **kwargs: _VT_co) -> None: ...
    @overload
    def __init__(self, __iterable: Iterable[tuple[_PathLike, _VT_co]], **kwargs: _VT_co) -> None: ...

    def __hash__(self) -> int: ...
    def __copy__(self: _T) -> _T:...
    def __deepcopy__(self: _T, memo: None | dict[int, Any] = ...) -> _T: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, key: _PathLike) -> _VT_co: ...

    def keys(self) -> KeysView[str]: ...
    def values(self) -> ValuesView[_VT_co]: ...
    def items(self) -> ItemsView[str, _VT_co]: ...
    def to_pathlib_dict(self) -> dict[pathlib.Path, _VT_co]: ...

    @overload
    def get(self, key: _PathLike, default: None = ...) -> None | _VT_co: ...
    @overload
    def get(self, key: _PathLike, default: _T | _VT_co) -> _T | _VT_co: ...

    if sys.version_info >= (3, 9):
        def __or__(
            self,
            value: None | _SupportsKeysAndGetItem[_PathLike, _T] | Iterable[tuple[_PathLike, _T]],
        ) -> PathMapping[_T | _VT_co]: ...
